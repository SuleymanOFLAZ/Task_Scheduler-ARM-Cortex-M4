/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"
#include "led.h"


uint32_t psp_of_user_tasks[MAX_USER_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint8_t current_task = 0; // task1 is running

void init_systick_timer(uint32_t tick_hz)
{
	// Calculating RELOAD Value
	uint32_t reload = ((uint32_t)SYSTICK_TIMER_CLOCK_SPEED / tick_hz) - 1;

	// Loading the RELOAD value to the RELOAD region (27-0 bits) of SYST_RVR register
	uint32_t *pSYST_RVR = (uint32_t *)0xE000E014;
	*pSYST_RVR  &= ~(0x00FFFFFF); // CLearing the RELOAD
	*pSYST_RVR |= reload; // Loading reload

	// Settings for SysTick Timer
	uint32_t *pSYST_CSR = (uint32_t *)0xE000E010;
	*pSYST_CSR |= (1 << 2); // Enabling SysTick exception request
	*pSYST_CSR |= (1 << 1); // Indicating the clock source to 16MHz High Speed Internal Processor Clock

	// Enabling the SysTick Timer
	*pSYST_CSR |= (1 << 0);
}

int main(void)
{
	enable_processor_faults();

	init_scheduler_task_stack(SCHED_STACK_START);

	init_user_tasks_stack();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();

	task1_handler();
    /* Loop forever */
	for(;;);
}

void enable_processor_faults(void)
{
	uint32_t *pSHCSR = (uint32_t *)0xE000ED24;
	*pSHCSR = (1 << 18); // Enabling the Usage Fault
	*pSHCSR = (1 << 17); // Enabling the Bus Fault
	*pSHCSR = (1 << 16); // Enabling the MemManage Fault
}

void task1_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task1\n");
	}
}
void task2_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task2\n");
	}
}
void task3_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task3\n");
	}
}
void task4_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task4\n");
	}
}

__attribute__((naked)) void init_scheduler_task_stack(uint32_t sched_task_stack_start)
{
	__asm volatile("MSR MSP,%0" : : "r"(sched_task_stack_start) : );
	__asm volatile("BX LR");
}

void init_user_tasks_stack(void)
{
	uint32_t *pPSP;
	uint32_t pUser_task_handlers[MAX_USER_TASKS] = {(uint32_t)task1_handler, (uint32_t)task2_handler, (uint32_t)task3_handler, (uint32_t)task4_handler};

	for(int i=0; i<MAX_USER_TASKS ; i++)
	{
		pPSP = (uint32_t *)psp_of_user_tasks[i];

		pPSP--; // xPSR
		*pPSP = (uint32_t)0x01000000; // DUMMY xPSR Should be 0x01000000 because of the T bit

		pPSP--; // PC
		*pPSP = (uint32_t)pUser_task_handlers[i];

		pPSP--; // LR
		*pPSP = (uint32_t)0xFFFFFFFD; // Special Return Value

		for(int j=0; j<13; j++)
		{
			pPSP--; // General Purpuse Registers R12-R0
			*pPSP = (uint32_t)0x00;
		}

		psp_of_user_tasks[i] = (uint32_t)pPSP; // Saving the final value of the PSP

	}
}

uint32_t get_psp_value(void)
{
	return psp_of_user_tasks[current_task];
}

void save_psp_value(uint32_t current_psp_value)
{
	psp_of_user_tasks[current_task] = current_psp_value;
}

void decide_next_task(void)
{
	current_task++;
	current_task %= MAX_USER_TASKS;
}

__attribute__((naked)) void switch_sp_to_psp(void)
{
	// Initialize the PSP with TASK1 starting value
	__asm volatile("PUSH {LR}"); // preserve LR which connects back to main
	__asm volatile("BL get_psp_value");
	__asm volatile("MSR PSP, R0"); // initialize PSP
	__asm volatile("POP {LR}"); // bring LR back

	// Change the MSP to PSP
	__asm volatile("MRS R0, CONTROL"); // Saving CONTROL Register to R0
	__asm volatile("ORR R0, R0, #0x02"); // Setting the 1st bit
	__asm volatile("MSR CONTROL, R0"); // Load back to CONTROL Register
	__asm volatile("BX LR");
}

void MemManage_Handler(void)
{
	printf("Exception: MemManage Fault\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception: BusFault\n");
	while(1);
}

void UsageFault_Handler(void)
{
	printf("Exception: Usage Fault\n");
	while(1);
}

void HardFault_Handler(void)
{
	printf("Exception: HardFault\n");
	while(1);
}

__attribute__((naked)) void SysTick_Handler(void)
{
	/* First push the LR, Because we will use BL instruction */
	__asm volatile("PUSH {LR}");

	/* Save  the context of current tasks */
	//1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
	//2. Using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");

	/* Retrieve the context of next task */
	//1. Decide next task to run
	__asm volatile("BL decide_next_task");
	//2. Get its past PSP value
	__asm volatile("BL get_psp_value");
	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!, {R4-R11}");
	//4. Update PSP
	__asm volatile("MSR PSP, R0");

	/* POP the LR and go back */
	__asm volatile("POP {LR}");
	__asm volatile("BX LR");
}
