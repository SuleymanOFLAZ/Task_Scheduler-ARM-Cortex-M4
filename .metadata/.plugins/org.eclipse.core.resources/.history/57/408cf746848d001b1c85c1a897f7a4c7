/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

/* Stack Memory Address Calculation */
#define SIZE_TASK_STACK  		1024U
#define SIZE_SCHED_STACK 		1024U

#define SRAM_START				0X20000000U
#define SRAM_SIZE				((128) * (1024))
#define SRAM_END				((SRAM_START) + (SRAM_SIZE))

#define T1_STACK_START			SRAM_END
#define T2_STACK_START			((SRAM_END) - (1 * SIZE_TASK_STACK))
#define T3_STACK_START			((SRAM_END) - (2 * SIZE_TASK_STACK))
#define T4_STACK_START			((SRAM_END) - (3 * SIZE_TASK_STACK))
#define SCHED_STACK_START		((SRAM_END) - (4 * SIZE_TASK_STACK))

/* SysTick timer macros */
#define TICK_HZ 1000U
#define PROCESSOR_CLOCK_SPEED 16000000U
#define SYSTICK_TIMER_CLOCK_SPEED PROCESSOR_CLOCK_SPEED

#define MAX_USER_TASKS 4

void task1_handler(void); // This is Task1
void task2_handler(void); // This is Task2
void task3_handler(void); // This is Task3
void task4_handler(void); // This is Task4 of the application

void init_scheduler_task(uint32_t sched_task_stack_start);
void init_user_tasks(void);

uint32_t psp_of_user_tasks[MAX_USER_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

void init_systick_timer(uint32_t tick_hz)
{
	// Calculating RELOAD Value
	uint32_t reload = ((uint32_t)SYSTICK_TIMER_CLOCK_SPEED / tick_hz) - 1;

	// Loading the RELOAD value to the RELOAD region (27-0 bits) of SYST_RVR register
	uint32_t *pSYST_RVR = (uint32_t *)0xE000E014;
	*pSYST_RVR  &= ~(0x00FFFFFF); // CLearing the RELOAD
	*pSYST_RVR |= reload; // Loading reload

	// Settings for SysTick Timer
	uint32_t *pSYST_CSR = (uint32_t *)0xE000E010;
	*pSYST_CSR |= (1 << 2); // Enabling SysTick exception request
	*pSYST_CSR |= (1 << 1); // Indicating the clock source to 16MHz High Speed Internal Processor Clock

	// Enabling the SysTick Timer
	*pSYST_CSR |= (1 << 0);
}

int main(void)
{
	init_scheduler_task(SCHED_STACK_START);
	init_user_tasks();
	init_systick_timer(TICK_HZ);
    /* Loop forever */
	for(;;);
}

void task1_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task1\n");
	}
}
void task2_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task2\n");
	}
}
void task3_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task3\n");
	}
}
void task4_handler(void)
{
	while(1) // In our application tasks never return
	{
		printf("Inside the Task4\n");
	}
}

__attribute__((naked)) void init_scheduler_task(uint32_t sched_task_stack_start)
{
	__asm volatile("MSR MSP,%0" : : "r"(sched_task_stack_start) : );
	__asm volatile("BX LR");
}

void init_user_tasks(void)
{
	uint32_t *pPSP;
	uint32_t pUser_task_handlers[MAX_USER_TASKS] = {(uint32_t)task1_handler, (uint32_t)task2_handler, (uint32_t)task3_handler, (uint32_t)task4_handler};

	for(uint32_t i=0; i<MAX_USER_TASKS ; i++)
	{
		pPSP = (uint32_t *)psp_of_user_tasks[i];

		pPSP--;
		*pPSP = (uint32_t)0x01000000;

		pPSP--;
		*pPSP = (uint32_t)pUser_task_handlers[i];

		pPSP--;
		*pPSP = (uint32_t)0xFFFFFFFD;

		for(uint32_t j=0; i<12; j++)
		{
			pPSP--;
			*pPSP = (uint32_t)0x00;
		}

		psp_of_user_tasks[i] = (uint32_t)pPSP;

	}
}

void SysTick_Handler(void)
{

}
